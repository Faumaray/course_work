//! SeaORM Entity. Generated by sea-orm-codegen 0.5.0

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "mobs"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub id: i32,
    pub locationid: Option<i32>,
    pub mob_name: String,
    pub description: Option<String>,
    pub preview: Option<Vec<u8>>,
    pub game_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Locationid,
    MobName,
    Description,
    Preview,
    GameId,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Locations,
    Games,
    Loot,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::Locationid => ColumnType::Integer.def().null(),
            Self::MobName => ColumnType::String(None).def(),
            Self::Description => ColumnType::String(None).def().null(),
            Self::Preview => ColumnType::Binary.def().null(),
            Self::GameId => ColumnType::Integer.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Locations => Entity::belongs_to(super::locations::Entity)
                .from(Column::Locationid)
                .to(super::locations::Column::Id)
                .into(),
            Self::Games => Entity::belongs_to(super::games::Entity)
                .from(Column::GameId)
                .to(super::games::Column::Id)
                .into(),
            Self::Loot => Entity::has_many(super::loot::Entity).into(),
        }
    }
}

impl Related<super::locations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Locations.def()
    }
}

impl Related<super::games::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Games.def()
    }
}

impl Related<super::loot::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Loot.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
